#include <boost/test/unit_test.hpp>
#include <stdint.h>
#include <vector>
#include <map>
#include "VmScript/VmScriptRun.h"
#include "VmScript/CVir8051.h"
#include "util.h"
#include "main.h"
#include "txdb.h"
#include "tx.h"
#include "util.h"
#include <stdio.h>
using namespace std;

class Cprepacke {
public:
	unsigned short iniOutHeight;
	unsigned short followOutHeight;
	unsigned char money[20];
public:
	IMPLEMENT_SERIALIZE
	(
			READWRITE(iniOutHeight);
			READWRITE(followOutHeight);
			for(int i = 0;i < 20;i++)
			READWRITE(money[i]);
	)
};

class CNextPacket {
public:
	unsigned char money[20];
public:
	IMPLEMENT_SERIALIZE
	(
			for(int i = 0;i < 20;i++)
			READWRITE(money[i]);
	)
};

/*----The Length of This Array is 3687 Byte.----*/

unsigned char Array[]={

0x02,0x00,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFB,0x00,0x00,0x00,

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x0E,0x65,0xE4,0x90,0x0F,0x2A,0x78,0x02,

0x79,0x01,0x80,0x02,0xF0,0xA3,0xD8,0xFC,0xD9,0xFA,0x7A,0x00,0x7B,0x0F,0x90,0x00,

0x65,0x78,0x2B,0x79,0x01,0x80,0x15,0xE4,0x93,0xA3,0xAD,0x82,0xAE,0x83,0x8A,0x82,

0x8B,0x83,0xF0,0xA3,0xAA,0x82,0xAB,0x83,0x8D,0x82,0x8E,0x83,0xD8,0xE9,0xD9,0xE7,

0x12,0x0D,0xB1,0x12,0x0E,0x62,0x75,0xD0,0x00,0x75,0x81,0xBF,0x75,0x10,0x00,0x75,

0x11,0x0F,0x02,0x00,0x1A,0x48,0xF5,0x01,0x02,0x00,0x2D,0x31,0x00,0x00,0xE0,0xDA,

0xA4,0x0D,0x18,0x1E,0x00,0x07,0x00,0x32,0x34,0x00,0x00,0x77,0x17,0xC7,0x33,0xFE,

0xFF,0xFF,0xFF,0x88,0xF7,0x28,0x00,0x00,0x00,0x0A,0xFF,0x02,0x01,0x02,0x00,0xCA,

0xC0,0xE0,0xE6,0xF0,0xA3,0x08,0xDA,0xFA,0xD0,0xE0,0xFA,0x22,0x25,0x10,0x10,0xAF,

0x08,0xF5,0x10,0x40,0x0C,0x15,0x11,0x80,0x08,0xF5,0x10,0x40,0x02,0x15,0x11,0xD2,

0xAF,0x22,0x00,0xC0,0xD0,0x25,0x10,0x10,0xAF,0x08,0xF5,0x10,0x50,0x0C,0x05,0x11,

0x80,0x08,0xF5,0x10,0x50,0x02,0x05,0x11,0xD2,0xAF,0xD0,0xD0,0x22,0x25,0x10,0xF5,

0x82,0x10,0xAF,0x08,0xF5,0x10,0x40,0x0C,0x15,0x11,0x80,0x08,0xF5,0x10,0x40,0x02,

0x15,0x11,0xD2,0xAF,0x85,0x11,0x83,0x22,0x25,0x10,0xF5,0x82,0xE4,0x35,0x11,0xF5,

0x83,0x22,0x25,0x10,0xFA,0xE4,0x35,0x11,0xFB,0x22,0x25,0x10,0xC5,0x82,0xC0,0xE0,

0xE5,0x11,0x34,0xFF,0xC5,0x83,0xC0,0xE0,0xE5,0x10,0xC3,0x95,0x82,0x24,0xF9,0x10,

0xAF,0x08,0x85,0x83,0x11,0x85,0x82,0x10,0x80,0x08,0x85,0x83,0x11,0x85,0x82,0x10,

0xD2,0xAF,0xCE,0xF0,0xA3,0xE5,0x20,0xF0,0xA3,0x78,0x08,0xE6,0x08,0xF0,0xA3,0xDE,

0xFA,0xEF,0xF0,0xA3,0xE5,0x81,0x24,0xFB,0xF8,0xE6,0x08,0xF0,0xA3,0xE6,0x08,0xF0,

0xA3,0x08,0x08,0xE6,0x08,0xF0,0xA3,0xE6,0x08,0xF0,0xA3,0x15,0x81,0x15,0x81,0xD0,

0xE0,0xFE,0xD0,0xE0,0xF8,0x15,0x81,0x15,0x81,0xE8,0xC0,0xE0,0xEE,0xC0,0xE0,0x22,

0x85,0x11,0x83,0x85,0x10,0x82,0xE0,0xA3,0xFE,0xE0,0xA3,0xF5,0x20,0x78,0x08,0xE0,

0xA3,0xF6,0x08,0xDF,0xFA,0xE0,0xA3,0xFF,0xE0,0xA3,0xC0,0xE0,0xE0,0xA3,0xC0,0xE0,

0xE0,0xA3,0xC0,0xE0,0xE0,0xA3,0xC0,0xE0,0x10,0xAF,0x08,0x85,0x82,0x10,0x85,0x83,

0x11,0x80,0x08,0x85,0x82,0x10,0x85,0x83,0x11,0xD2,0xAF,0xD0,0x83,0xD0,0x82,0x22,

0x74,0x02,0x80,0x00,0xC0,0xE0,0xF4,0x04,0x12,0x00,0xCD,0xD0,0xE0,0x12,0x00,0x8F,

0x22,0xD0,0x83,0xD0,0x82,0xE9,0xC0,0xE0,0xE4,0x93,0xA3,0xC3,0x86,0xF0,0xC5,0xF0,

0x95,0xF0,0xF9,0x08,0xE4,0x93,0xA3,0x86,0xF0,0xC5,0xF0,0x95,0xF0,0x70,0x0B,0xE4,

0x93,0xA3,0xC3,0x99,0x40,0x05,0xE9,0x04,0x80,0x02,0xA3,0xE4,0x75,0xF0,0x02,0xA4,

0x25,0x82,0xF5,0x82,0xE5,0xF0,0x35,0x83,0xF5,0x83,0xD0,0xE0,0xF9,0xE4,0x93,0xA3,

0xC0,0xE0,0xE4,0x93,0xC0,0xE0,0x22,0x74,0xF8,0x12,0x00,0xFA,0xE9,0xFE,0xEE,0x90,

0xFB,0xFF,0xF0,0x12,0x00,0x08,0x7F,0x01,0x02,0x01,0x60,0x74,0xF5,0x12,0x00,0xFA,

0x74,0xF9,0x12,0x00,0x9C,0xEA,0xFE,0xEB,0xFF,0x8C,0x08,0x8D,0x09,0x85,0x10,0x82,

0x85,0x11,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0x75,0x0A,0x05,0x75,0x0B,0x00,

0x78,0x0A,0x12,0x01,0xA0,0xEE,0xFC,0xEF,0xFD,0x74,0x04,0x12,0x00,0xF2,0x12,0x0D,

0xFB,0x74,0x02,0x12,0x00,0xB2,0x74,0x02,0x12,0x00,0xE8,0xE0,0xC3,0x94,0xFD,0x50,

0x2A,0x74,0x02,0x12,0x00,0xE8,0xE0,0xF8,0x79,0x00,0x85,0x10,0x82,0x85,0x11,0x83,

0xE8,0xF0,0xA3,0xE9,0xF0,0x8E,0x82,0x8F,0x83,0xA3,0xA8,0x82,0xA9,0x83,0x85,0x08,

0x82,0x85,0x09,0x83,0xE8,0xF0,0xA3,0xE9,0xF0,0x80,0x3D,0x74,0x02,0x12,0x00,0xE8,

0xE0,0x64,0xFD,0x70,0x33,0x75,0x0A,0x02,0x75,0x0B,0x00,0x78,0x0A,0x12,0x01,0xA0,

0x74,0x05,0x12,0x00,0xE8,0xAC,0x82,0xAD,0x83,0x74,0x02,0x12,0x00,0xF2,0x12,0x0D,

0xFB,0x74,0x02,0x12,0x00,0xB2,0xEE,0x24,0x03,0xF8,0xE4,0x3F,0xF9,0x85,0x08,0x82,

0x85,0x09,0x83,0xE8,0xF0,0xA3,0xE9,0xF0,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0xFA,

0xA3,0xE0,0xFB,0x74,0x07,0x12,0x00,0xB2,0x7F,0x04,0x02,0x01,0x60,0x74,0xF7,0x12,

0x00,0xFA,0x90,0x0F,0x2A,0xE0,0x70,0x3C,0x75,0x08,0xFF,0x75,0x09,0x03,0x78,0x08,

0x12,0x01,0xA0,0x7C,0x00,0x7D,0xFC,0x7A,0x2B,0x7B,0x0F,0x12,0x0D,0xFB,0x74,0x02,

0x12,0x00,0xB2,0x75,0x08,0xFF,0x75,0x09,0x03,0x78,0x08,0x12,0x01,0xA0,0x7C,0x00,

0x7D,0x00,0x7A,0x00,0x7B,0xFC,0x12,0x0E,0x38,0x74,0x02,0x12,0x00,0xB2,0x74,0x01,

0x90,0x0F,0x2A,0xF0,0x7A,0x2B,0x7B,0x0F,0x7F,0x02,0x02,0x01,0x60,0x74,0xF7,0x12,

0x00,0xFA,0x12,0x02,0xCD,0x8A,0x08,0x8B,0x09,0x85,0x08,0x82,0x85,0x09,0x83,0xA8,

0x82,0xA9,0x83,0xE8,0x24,0x02,0xFA,0xE4,0x39,0xFB,0x7F,0x02,0x02,0x01,0x60,0x74,

0xF3,0x12,0x00,0xFA,0x74,0xFE,0x12,0x00,0x9C,0x8A,0x0A,0x8B,0x0B,0x12,0x02,0xCD,

0x8A,0x0C,0x8B,0x0D,0x85,0x0C,0x08,0x85,0x0D,0x09,0x85,0x10,0x82,0x85,0x11,0x83,

0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0xAE,0x08,0xAF,0x09,0xAC,0x10,0xAD,0x11,0xEE,

0x24,0x0D,0xFA,0xE4,0x3F,0xFB,0x12,0x02,0x0B,0x85,0x0A,0x82,0x85,0x0B,0x83,0xEA,

0xF0,0xA3,0xEB,0xF0,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0xFA,0xA3,0xE0,0xFB,0x74,

0x02,0x12,0x00,0xB2,0x7F,0x06,0x02,0x01,0x60,0x74,0xF5,0x12,0x00,0xFA,0x74,0xFE,

0x12,0x00,0x9C,0xEA,0xFE,0xEB,0xFF,0x12,0x02,0xCD,0x8A,0x08,0x8B,0x09,0x85,0x08,

0x0A,0x85,0x09,0x0B,0x85,0x10,0x82,0x85,0x11,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,

0xF0,0x85,0x0A,0x08,0x85,0x0B,0x09,0xAC,0x10,0xAD,0x11,0xE5,0x08,0x24,0x0D,0xFA,

0xE4,0x35,0x09,0xFB,0x12,0x02,0x0B,0x8E,0x82,0x8F,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,

0xAC,0x10,0xAD,0x11,0x8E,0x82,0x8F,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,

0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,0x0B,0x8E,0x82,0x8F,

0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0xFA,0xA3,0xE0,

0xFB,0x74,0x02,0x12,0x00,0xB2,0x7F,0x04,0x02,0x01,0x60,0x74,0xF3,0x12,0x00,0xFA,

0x74,0xFE,0x12,0x00,0x9C,0x8A,0x08,0x8B,0x09,0xEC,0xFE,0xED,0xFF,0x12,0x02,0xCD,

0x8A,0x0A,0x8B,0x0B,0x85,0x0A,0x0C,0x85,0x0B,0x0D,0x85,0x10,0x82,0x85,0x11,0x83,

0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0x85,0x0C,0x0A,0x85,0x0D,0x0B,0xAC,0x10,0xAD,

0x11,0xE5,0x0A,0x24,0x0D,0xFA,0xE4,0x35,0x0B,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,

0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,

0x09,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,

0xA3,0xE0,0x39,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,

0xEB,0xF0,0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,0x09,0x83,0xE0,0xF8,0xA3,0xE0,

0xF9,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,

0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0x85,0x08,0x82,0x85,

0x09,0x83,0xEE,0x24,0x01,0xF8,0xE4,0x3F,0xF9,0xC3,0xE0,0x98,0xA3,0xE0,0x99,0x50,

0x14,0x85,0x08,0x82,0x85,0x09,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0x7A,0x00,

0x7B,0x00,0x02,0x05,0x65,0x85,0x08,0x82,0x85,0x09,0x83,0x74,0x00,0xF0,0xA3,0x74,

0x00,0xF0,0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,0x09,0x83,0xE0,0xF8,0xA3,0xE0,

0xF9,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,

0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xEE,0x4F,0x60,0x2A,

0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,0x09,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,

0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,0x0B,0x85,

0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xEE,0xF8,0xEF,0xF9,0xE8,0x24,

0xFF,0xFE,0xE9,0x34,0xFF,0xFF,0xE8,0x49,0x70,0x98,0x85,0x10,0x82,0x85,0x11,0x83,

0xE0,0xFA,0xA3,0xE0,0xFB,0x74,0x02,0x12,0x00,0xB2,0x7F,0x06,0x02,0x01,0x60,0x74,

0xF3,0x12,0x00,0xFA,0x74,0xFE,0x12,0x00,0x9C,0x8A,0x08,0x8B,0x09,0xEC,0xFE,0xED,

0xFF,0x12,0x02,0xCD,0x8A,0x0A,0x8B,0x0B,0x85,0x0A,0x0C,0x85,0x0B,0x0D,0x85,0x10,

0x82,0x85,0x11,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0x85,0x0C,0x0A,0x85,0x0D,

0x0B,0xAC,0x10,0xAD,0x11,0xE5,0x0A,0x24,0x0D,0xFA,0xE4,0x35,0x0B,0xFB,0x12,0x02,

0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xAC,0x10,0xAD,0x11,

0x85,0x08,0x82,0x85,0x09,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,0x85,0x11,

0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,0x85,0x09,

0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,0x09,0x83,

0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,

0x39,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,

0x85,0x08,0x82,0x85,0x09,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,0xF0,0xAC,0x10,0xAD,

0x11,0x85,0x08,0x82,0x85,0x09,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,0x85,

0x11,0x83,0xE0,0x28,0xFA,0xA3,0xE0,0x39,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,0x85,

0x09,0x83,0xEA,0xF0,0xA3,0xEB,0xF0,0xAC,0x10,0xAD,0x11,0x85,0x08,0x82,0x85,0x09,

0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x28,0xFA,0xA3,

0xE0,0x39,0xFB,0x12,0x02,0x0B,0x85,0x08,0x82,0x85,0x09,0x83,0xEA,0xF0,0xA3,0xEB,

0xF0,0xEE,0xF8,0xEF,0xF9,0xE8,0x24,0xFF,0xFE,0xE9,0x34,0xFF,0xFF,0xE8,0x49,0x70,

0x9C,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0xFA,0xA3,0xE0,0xFB,0x74,0x02,0x12,0x00,

0xB2,0x7F,0x06,0x02,0x01,0x60,0x74,0xF3,0x12,0x00,0xFA,0x8A,0x0A,0x8B,0x0B,0x89,

0x08,0x90,0xFC,0x02,0xE0,0xFE,0x7F,0x00,0xEE,0x75,0xF0,0x34,0xA4,0xCE,0xA8,0xF0,

0x75,0xF0,0x00,0xA4,0x28,0xF8,0x75,0xF0,0x34,0xEF,0xA4,0x28,0xFF,0x90,0xFC,0x02,

0xE0,0x25,0x08,0xF0,0x85,0x08,0x09,0x74,0xFF,0x25,0x09,0xF5,0x08,0xE5,0x09,0x60,

0x33,0x75,0x0C,0x34,0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,0xA0,0xAC,0x0A,0xAD,0x0B,

0x74,0x03,0x2E,0xFA,0x74,0xFC,0x3F,0xFB,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,

0xE5,0x0A,0x24,0x34,0xF5,0x0A,0x50,0x02,0x05,0x0B,0xEE,0x24,0x34,0xFE,0xEF,0x34,

0x00,0xFF,0x80,0xC0,0x7F,0x06,0x02,0x01,0x60,0x74,0xF5,0x12,0x00,0xFA,0xEA,0xFE,

0xEB,0xFF,0x89,0x08,0xE5,0x08,0x90,0xFC,0x02,0xF0,0xE5,0x08,0xF5,0x0A,0x75,0x0B,

0x00,0xE5,0x0A,0x75,0xF0,0x34,0xA4,0xC5,0x0A,0xA8,0xF0,0x75,0xF0,0x00,0xA4,0x28,

0xF8,0x75,0xF0,0x34,0xE5,0x0B,0xA4,0x28,0xF5,0x0B,0x78,0x0A,0x12,0x01,0xA0,0xEE,

0xFC,0xEF,0xFD,0x7A,0x03,0x7B,0xFC,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x7F,

0x04,0x02,0x01,0x60,0xC0,0x82,0xC0,0x83,0x8A,0x82,0x8B,0x83,0xA3,0xA3,0xE0,0xC3,

0x94,0x03,0x50,0x15,0x8A,0x82,0x8B,0x83,0xE0,0xC3,0x94,0x02,0x50,0x0B,0x8A,0x82,

0x8B,0x83,0xA3,0xE0,0xC3,0x94,0x03,0x40,0x03,0xC3,0x80,0x01,0xD3,0xD0,0x83,0xD0,

0x82,0x22,0x74,0xF3,0x12,0x00,0xFA,0x74,0xCA,0x12,0x00,0x9C,0x12,0x03,0x1D,0x8A,

0x08,0x8B,0x09,0x85,0x08,0x0A,0x85,0x09,0x0B,0x85,0x10,0x82,0x85,0x11,0x83,0x74,

0x00,0xF0,0xA3,0x74,0x00,0xF0,0xAA,0x10,0xAB,0x11,0x12,0x03,0x3F,0x8A,0x08,0x8B,

0x09,0xAE,0x08,0xAF,0x09,0xAA,0x10,0xAB,0x11,0x12,0x03,0x99,0x8A,0x0C,0x8B,0x0D,

0x85,0x0C,0x08,0x85,0x0D,0x09,0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0x64,0x02,0x70,

0x04,0xA3,0xE0,0x64,0x00,0x60,0x04,0xC3,0x02,0x08,0xA4,0x85,0x08,0x82,0x85,0x09,

0x83,0xE0,0x70,0x11,0x85,0x08,0x82,0x85,0x09,0x83,0xA3,0xE0,0x64,0x02,0x70,0x05,

0x79,0x00,0x12,0x01,0xF7,0x74,0x1F,0x12,0x00,0xE8,0x74,0x02,0xF0,0x74,0x1D,0x12,

0x00,0xE8,0x74,0x04,0xF0,0x8E,0x82,0x8F,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x74,0x20,

0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x74,0x1C,0x12,0x00,0xE8,0x74,0x00,0xF0,

0x75,0x0C,0x14,0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,0xA0,0xEE,0x24,0x04,0xFC,0xE4,

0x3F,0xFD,0x74,0x24,0x12,0x00,0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,

0x12,0x00,0xB2,0x74,0x05,0x12,0x00,0xE8,0x74,0x01,0xF0,0x74,0x03,0x12,0x00,0xE8,

0x74,0x02,0xF0,0x8E,0x82,0x8F,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0x74,0x06,0x12,0x00,

0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x74,0x02,0x12,0x00,0xE8,0x74,0x00,0xF0,0x74,0x04,

0x12,0x00,0xE8,0x74,0x01,0xF0,0x75,0x0C,0x14,0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,

0xA0,0xEE,0x24,0x04,0xFC,0xE4,0x3F,0xFD,0x74,0x0A,0x12,0x00,0xE8,0xAA,0x82,0xAB,

0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x79,0x01,0x74,0x02,0x12,0x00,0xF2,

0x12,0x07,0x09,0xD3,0x74,0x36,0x12,0x00,0xB2,0x7F,0x06,0x02,0x01,0x60,0x74,0xF1,

0x12,0x00,0xFA,0x74,0xC7,0x12,0x00,0x9C,0x12,0x03,0x1D,0x8A,0x08,0x8B,0x09,0x85,

0x08,0x0E,0x85,0x09,0x0F,0x74,0x01,0x12,0x00,0xE8,0x74,0x00,0xF0,0xA3,0x74,0x00,

0xF0,0x74,0x01,0x12,0x00,0xF2,0x12,0x03,0x3F,0x8A,0x08,0x8B,0x09,0x85,0x08,0x0A,

0x85,0x09,0x0B,0x7E,0x00,0x7F,0x00,0xEE,0xFC,0xEF,0xFD,0x74,0x01,0x12,0x00,0xF2,

0x12,0x05,0x6F,0x74,0x03,0x12,0x00,0xE8,0xEA,0xF0,0xA3,0xEB,0xF0,0x74,0x01,0x12,

0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF9,0xE8,0x49,0x70,0x05,0x79,0x00,0x12,0x01,0xF7,

0x85,0x10,0x82,0x85,0x11,0x83,0x74,0x00,0xF0,0x75,0x08,0x01,0x75,0x09,0x00,0x78,

0x08,0x12,0x01,0xA0,0x74,0x05,0x12,0x00,0xE8,0xE0,0xFC,0xA3,0xE0,0xFD,0x74,0x02,

0x12,0x00,0xF2,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x85,0x10,0x82,0x85,0x11,

0x83,0xE0,0x64,0x01,0x60,0x05,0x79,0x00,0x12,0x01,0xF7,0xEE,0xFC,0xEF,0xFD,0x74,

0x01,0x12,0x00,0xF2,0x12,0x04,0x1B,0x8A,0x0C,0x8B,0x0D,0x85,0x0C,0x08,0x85,0x0D,

0x09,0x74,0x22,0x12,0x00,0xE8,0x74,0x01,0xF0,0x74,0x20,0x12,0x00,0xE8,0x74,0x04,

0xF0,0x85,0x0E,0x82,0x85,0x0F,0x83,0xA3,0xA3,0xE0,0xC0,0xE0,0x74,0x1F,0x12,0x00,

0xE8,0xD0,0xE0,0xF0,0x85,0x0A,0x82,0x85,0x0B,0x83,0xA3,0xA3,0xE0,0xF8,0xA3,0xE0,

0xF9,0x74,0x23,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,0x14,0x75,0x0D,

0x00,0x78,0x0C,0x12,0x01,0xA0,0xAC,0x08,0xAD,0x09,0x74,0x27,0x12,0x00,0xE8,0xAA,

0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x74,0x08,0x12,0x00,0xE8,

0x74,0x00,0xF0,0x74,0x07,0x12,0x00,0xE8,0x74,0x00,0xF0,0x74,0x06,0x12,0x00,0xE8,

0x74,0x02,0xF0,0x85,0x0E,0x82,0x85,0x0F,0x83,0xA3,0xA3,0xE0,0xC0,0xE0,0x74,0x05,

0x12,0x00,0xE8,0xD0,0xE0,0xF0,0x85,0x0A,0x82,0x85,0x0B,0x83,0xA3,0xA3,0xE0,0xF8,

0xA3,0xE0,0xF9,0x74,0x09,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,0x14,

0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,0xA0,0xAC,0x08,0xAD,0x09,0x74,0x0D,0x12,0x00,

0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x75,0x0C,0x00,

0x75,0x0D,0x04,0x78,0x0C,0x12,0x01,0xA0,0x7C,0x00,0x7D,0x00,0x7A,0x00,0x7B,0xFC,

0x12,0x0E,0x38,0x74,0x02,0x12,0x00,0xB2,0x79,0x01,0x74,0x05,0x12,0x00,0xF2,0x12,

0x06,0x96,0xD3,0x74,0x39,0x12,0x00,0xB2,0x7F,0x08,0x02,0x01,0x60,0x74,0xF1,0x12,

0x00,0xFA,0x74,0x8E,0x12,0x00,0x9C,0x12,0x03,0x1D,0x8A,0x08,0x8B,0x09,0x85,0x08,

0x0A,0x85,0x09,0x0B,0x85,0x10,0x82,0x85,0x11,0x83,0x74,0x00,0xF0,0xA3,0x74,0x00,

0xF0,0xAA,0x10,0xAB,0x11,0x12,0x03,0x3F,0x74,0x02,0x12,0x00,0xE8,0xEA,0xF0,0xA3,

0xEB,0xF0,0x75,0x08,0x01,0x75,0x09,0x00,0xAC,0x08,0xAD,0x09,0xAA,0x10,0xAB,0x11,

0x12,0x05,0x6F,0x74,0x04,0x12,0x00,0xE8,0xEA,0xF0,0xA3,0xEB,0xF0,0x85,0x10,0x82,

0x85,0x11,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0xE8,0x49,0x70,0x05,0x79,0x00,0x12,0x01,

0xF7,0x74,0x04,0x12,0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,0x82,0xE0,0x60,

0x05,0x79,0x00,0x12,0x01,0xF7,0x7C,0x00,0x7D,0x00,0xAA,0x10,0xAB,0x11,0x12,0x04,

0x1B,0x74,0x08,0x12,0x00,0xE8,0xEA,0xF0,0xA3,0xEB,0xF0,0x7C,0x00,0x7D,0x00,0xAA,

0x10,0xAB,0x11,0x12,0x05,0x6F,0x74,0x04,0x12,0x00,0xE8,0xEA,0xF0,0xA3,0xEB,0xF0,

0x85,0x10,0x82,0x85,0x11,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0xE8,0x49,0x70,0x05,0x79,

0x00,0x12,0x01,0xF7,0x74,0x04,0x12,0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,

0x82,0xE0,0x70,0x05,0x79,0x00,0x12,0x01,0xF7,0x74,0x5B,0x12,0x00,0xE8,0x74,0x00,

0xF0,0x74,0x59,0x12,0x00,0xE8,0x74,0x01,0xF0,0x85,0x0A,0x82,0x85,0x0B,0x83,0xA3,

0xA3,0xE0,0xC0,0xE0,0x74,0x58,0x12,0x00,0xE8,0xD0,0xE0,0xF0,0x74,0x02,0x12,0x00,

0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,0x82,0xA3,0xA3,0xE0,0xF8,0xA3,0xE0,0xF9,

0x74,0x5C,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,0x14,0x75,0x0D,0x00,

0x78,0x0C,0x12,0x01,0xA0,0x74,0x0A,0x12,0x00,0xE8,0xE0,0xFC,0xA3,0xE0,0xFD,0x74,

0x60,0x12,0x00,0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,

0x74,0x41,0x12,0x00,0xE8,0x74,0x01,0xF0,0x74,0x40,0x12,0x00,0xE8,0x74,0x00,0xF0,

0x74,0x3F,0x12,0x00,0xE8,0x74,0x0C,0xF0,0x85,0x0A,0x82,0x85,0x0B,0x83,0xA3,0xA3,

0xE0,0x24,0xFF,0xC0,0xE0,0x74,0x3E,0x12,0x00,0xE8,0xD0,0xE0,0xF0,0x74,0x02,0x12,

0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,0x82,0xA3,0xA3,0xE0,0xF8,0xA3,0xE0,

0xF9,0x74,0x42,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,0x14,0x75,0x0D,

0x00,0x78,0x0C,0x12,0x01,0xA0,0x74,0x0A,0x12,0x00,0xE8,0xE0,0xFC,0xA3,0xE0,0xFD,

0x74,0x46,0x12,0x00,0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,

0xB2,0x79,0x01,0x74,0x3E,0x12,0x00,0xF2,0x12,0x06,0x96,0x85,0x0A,0x82,0x85,0x0B,

0x83,0xA3,0xA3,0xE0,0xF8,0x79,0x00,0xE8,0x24,0xFF,0xFC,0xE9,0x34,0xFF,0xFD,0xAA,

0x10,0xAB,0x11,0x12,0x04,0x1B,0x74,0x06,0x12,0x00,0xE8,0xEA,0xF0,0xA3,0xEB,0xF0,

0x7E,0x02,0x7F,0x00,0x75,0x0E,0x00,0x75,0x0F,0x00,0xEE,0xF8,0xEF,0xF9,0xE8,0x24,

0xFF,0xFE,0xE9,0x34,0xFF,0xFF,0xE8,0x49,0x70,0x03,0x02,0x0D,0x82,0x74,0x27,0x12,

0x00,0xE8,0x74,0x01,0xF0,0x74,0x25,0x12,0x00,0xE8,0x74,0x01,0xF0,0x85,0x0A,0x82,

0x85,0x0B,0x83,0xA3,0xA3,0xE0,0xC0,0xE0,0x74,0x24,0x12,0x00,0xE8,0xD0,0xE0,0xF0,

0x74,0x02,0x12,0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,0x82,0xA3,0xA3,0xE0,

0xF8,0xA3,0xE0,0xF9,0x74,0x28,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,

0x14,0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,0xA0,0xA8,0x0E,0xA9,0x0F,0xE8,0x75,0xF0,

0x14,0xA4,0xC8,0xAA,0xF0,0x75,0xF0,0x00,0xA4,0x2A,0xFA,0x75,0xF0,0x14,0xE9,0xA4,

0x2A,0xF9,0x74,0x08,0x12,0x00,0xE8,0xE0,0x28,0xFC,0xA3,0xE0,0x39,0xFD,0x74,0x2C,

0x12,0x00,0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0x74,

0x0D,0x12,0x00,0xE8,0x74,0x02,0xF0,0x74,0x0C,0x12,0x00,0xE8,0x74,0x00,0xF0,0x74,

0x0B,0x12,0x00,0xE8,0x74,0x0C,0xF0,0x74,0x0A,0x12,0x00,0xE8,0x74,0x00,0xF0,0x74,

0x02,0x12,0x00,0xE8,0xE0,0xF8,0xA3,0xE0,0xF5,0x83,0x88,0x82,0xA3,0xA3,0xE0,0xF8,

0xA3,0xE0,0xF9,0x74,0x0E,0x12,0x00,0xE8,0xE8,0xF0,0xA3,0xE9,0xF0,0x75,0x0C,0x14,

0x75,0x0D,0x00,0x78,0x0C,0x12,0x01,0xA0,0xA8,0x0E,0xA9,0x0F,0xE8,0x75,0xF0,0x14,

0xA4,0xC8,0xAA,0xF0,0x75,0xF0,0x00,0xA4,0x2A,0xFA,0x75,0xF0,0x14,0xE9,0xA4,0x2A,

0xF9,0x74,0x08,0x12,0x00,0xE8,0xE0,0x28,0xFC,0xA3,0xE0,0x39,0xFD,0x74,0x12,0x12,

0x00,0xE8,0xAA,0x82,0xAB,0x83,0x12,0x0D,0xFB,0x74,0x02,0x12,0x00,0xB2,0xEE,0x4F,

0x70,0x2B,0x74,0x27,0x12,0x00,0xE8,0x74,0x00,0xF0,0x74,0x0D,0x12,0x00,0xE8,0x74,

0x01,0xF0,0x74,0x0B,0x12,0x00,0xE8,0x74,0x02,0xF0,0x85,0x0A,0x82,0x85,0x0B,0x83,

0xA3,0xA3,0xE0,0xC0,0xE0,0x74,0x0A,0x12,0x00,0xE8,0xD0,0xE0,0xF0,0x79,0x01,0x74,

0x0A,0x12,0x00,0xF2,0x12,0x06,0x96,0x05,0x0E,0xE5,0x0E,0x70,0x02,0x05,0x0F,0x02,

0x0C,0x2A,0xD3,0x74,0x72,0x12,0x00,0xB2,0x7F,0x08,0x02,0x01,0x60,0x74,0xF7,0x12,

0x00,0xFA,0x12,0x03,0x1D,0x8A,0x08,0x8B,0x09,0x85,0x08,0x82,0x85,0x09,0x83,0xA3,

0xA3,0xE0,0xF8,0x79,0x00,0xE8,0x24,0x01,0xFA,0xE4,0x39,0xFB,0x7F,0x02,0x02,0x01,

0x60,0x12,0x03,0x1D,0x12,0x07,0x54,0x40,0x05,0x79,0x00,0x12,0x01,0xF7,0x12,0x0D,

0x8D,0x8A,0x08,0x8B,0x09,0xAE,0x08,0xAF,0x09,0x8E,0x08,0x8F,0x09,0x78,0x08,0x12,

0x01,0xB1,0x01,0x00,0x02,0xEC,0x0D,0xDD,0x0D,0xE2,0x0D,0xE7,0x0D,0x12,0x07,0x82,

0x80,0x0F,0x12,0x08,0xAE,0x80,0x0A,0x12,0x0A,0x4D,0x80,0x05,0x79,0x00,0x12,0x01,

0xF7,0x79,0x01,0x12,0x01,0xF7,0x7A,0x00,0x7B,0x00,0x22,0x74,0xF8,0x12,0x00,0xFA,

0xEA,0xF8,0xEB,0xF9,0x74,0x08,0x12,0x00,0xE8,0xE0,0xFE,0xA3,0xE0,0x80,0x1F,0x8C,

0x82,0x8D,0x83,0xE0,0x88,0x82,0x89,0x83,0xF0,0xA3,0xA8,0x82,0xA9,0x83,0x8C,0x82,

0x8D,0x83,0xA3,0xAC,0x82,0xAD,0x83,0xEE,0x24,0xFF,0x1E,0xEF,0x34,0xFF,0xFF,0xEE,

0x4F,0x70,0xDC,0x7F,0x01,0x02,0x01,0x60,0xC0,0x82,0xC0,0x83,0x85,0x10,0x82,0x85,

0x11,0x83,0xE0,0xF8,0xA3,0xE0,0xF9,0xE8,0x49,0x60,0x12,0x8A,0x82,0x8B,0x83,0xEC,

0xF0,0xA3,0xE8,0x24,0xFF,0x18,0xE9,0x34,0xFF,0xF9,0x48,0x70,0xF2,0xD0,0x83,0xD0,

0x82,0x22,0x02,0x00,0x17,0x80,0xFE,

};
#define random(x) (rand()%x)
#define EX_TIMES 100
typedef vector<unsigned char> vector_unsigned_char;
CAccountViewCache view(*pAccountViewTip, true);
const char *R1Array[] =
		{ "\x9c\x52\x4a\xdb\xcf\x56\x11\x12\x2b\x29\x12\x5e\x5d\x35\xd2\xd2",
				"\x9c\x52\x4a\xdb\xcf\x56\x11\x12\x2b\x29\x12\x5e\x5d\x35\xd2\xd2\x22\x81\xaa\xb5\x33\xf0\x08\x32\xd5\x56\xb1\xf9\xea\xe5\x1d\x7d",
				"\x70\x32\x1d\x7c\x47\xa5\x6b\x40\x26\x7e\x0a\xc3\xa6\x9c\xb6\xbf\x13\x30\x47\xa3\x19\x2d\xda\x71\x49\x13\x72\xf0\xb4\xca\x81\xd7" };

std::vector<unsigned char>& GetScriptBin(char *filepath) {

	std::vector<unsigned char> m_ROM;
	assert(filepath);
	FILE *m_file = fopen(filepath, "rb");
	if (m_file != NULL) {
		fseek(m_file, 0, SEEK_SET);
		fseek(m_file, 0, SEEK_END);
		int len = ftell(m_file);
		fseek(m_file, 0, SEEK_SET);
		char *buffer = (char*) malloc(len);
		memset(buffer, 0, len);
		fread(buffer, 1, len + 1, m_file);
		m_ROM.insert(m_ROM.begin(), buffer, buffer + len);
		if (buffer != NULL) {
			free(buffer);
			buffer = NULL;
		}
		if (m_file != NULL) {
			fclose(m_file);
			m_file = NULL;
		}
	}
	return m_ROM;
}

void Init(CAccountViewCache &view, CVmScript &vscript, vector<std::shared_ptr<CBaseTransaction> >& Tx) {
	vscript.Rom.insert(vscript.Rom.begin(), Array, Array + sizeof(Array));
	vscript.rule.maxPay = 50;
	vscript.rule.maxReSv = 50;
	vscript.rule.vNextOutHeight = 50;
	vscript.rule.vpreOutHeihgt = 100;
	vector_unsigned_char vpscript;
	CDataStream scriptData(SER_DISK, CLIENT_VERSION);
	scriptData << vscript;
	vpscript.assign(scriptData.begin(),scriptData.end());

	vector<vector_unsigned_char> account;
	for (int i = 1; i < 4; i++) {
		CSecureAccount sourceAccount;
		CRegID accountId(i + 2, i);
		std::vector<unsigned char> nvector;
		nvector.assign(R1Array[i - 1], R1Array[i - 1] + 20);
		uint160 hash(nvector);
		CKeyID keyId1 = (CKeyID) hash;
		sourceAccount.keyID = keyId1;
		sourceAccount.llValues = random(100);
		account.push_back(accountId.vRegID);
		assert(view.SaveAccountInfo(accountId.vRegID, keyId1, sourceAccount));
	}

	for (auto& it : view.cacheAccounts) {
		//	cout << "view.cacheAccounts:" << it.second.ToString().c_str() << endl;
	}
	vector<vector_unsigned_char> strContract;
	std::vector<unsigned char> scriptid;

	uint64_t ntemp = 5;
	Cprepacke packet;
	packet.iniOutHeight = 30;
	packet.followOutHeight = 7;
	sprintf((char*) packet.money, "%ld", ntemp);
	//packet.money = 5;
	CDataStream VmData(SER_DISK, CLIENT_VERSION);
	VmData << packet;

	CRegID scriptId(5, 9);
	CContractScript contractScript;
	contractScript.scriptId = scriptId.vRegID;
	contractScript.scriptContent = vpscript;
	CSecureTransaction *nTemp = static_cast<CSecureTransaction*>(Tx[0].get());
	nTemp->regScriptId = scriptId.vRegID;
	nTemp->vContract.insert(nTemp->vContract.begin(), VmData.begin(), VmData.end());
	int i = 0;

	for (auto& item : account) {
		if (i == 0) {
			nTemp->vArbitratorRegAccId.push_back(item);
			contractScript.setArbitratorAccId.insert(HexStr(item.begin(), item.end()));
		} else {
			nTemp->vRegAccountId.push_back(item);
		}
		i++;
	}
	VmData.clear();
	pContractScriptTip->AddContractScript(HexStr(scriptId.vRegID), contractScript);

	CNextPacket npacket1;
	//npacket1.money = 5;
	sprintf((char*) npacket1.money, "%ld", ntemp);
	VmData << npacket1;
	CAppealTransaction *vTemp = static_cast<CAppealTransaction*>(Tx[1].get());
	vTemp->vPreAcountIndex.push_back(0x01);
	vTemp->vContract.insert(vTemp->vContract.begin(), VmData.begin(), VmData.end());

	VmData.clear();

	CNextPacket arpacket1;
//	arpacket1.money = 5;
	sprintf((char*) arpacket1.money, "%ld", ntemp);
	VmData << arpacket1;

	CNextPacket arpacket2;
//	arpacket2.money = 1;
	ntemp = 1;
	sprintf((char*) arpacket2.money, "%ld", ntemp);
	VmData << arpacket2;

	vTemp = static_cast<CAppealTransaction*>(Tx[2].get());
	vTemp->vPreAcountIndex.push_back(0x00);
	vTemp->vContract.insert(vTemp->vContract.end(), VmData.begin(), VmData.end());
//	cout << HexStr(vTemp->vContract).c_str() << endl;
	VmData.clear();

}
void CheckretData(uint64_t nrecive, CSecureAccount ntempbuyer, CSecureAccount buyer, CSecureAccount ntempArbitrator,
		CSecureAccount Arbitrator, CNextPacket arpacket2) {
	if (atoi64((char*) arpacket2.money) >= nrecive
			&& atoi64((char*) arpacket2.money) <= ((ntempbuyer.llValues - 5) + nrecive)) {
		CFund opfund = Arbitrator.vFreedomFund[0];
		BOOST_CHECK(Arbitrator.vFreedomFund.size() == 2);
		BOOST_CHECK(opfund.value == 5);
		opfund = Arbitrator.vFreedomFund[1];
		BOOST_CHECK(opfund.value == atoi64((char* ) arpacket2.money));
		BOOST_CHECK(buyer.llValues == (ntempbuyer.llValues - 5) + nrecive - atoi64((char* ) arpacket2.money));
	} else if (atoi64((char*) arpacket2.money) < nrecive) {
		CFund opfund = Arbitrator.vFreedomFund[0];
		BOOST_CHECK(Arbitrator.vFreedomFund.size() == 2);
		BOOST_CHECK(opfund.value == 5);
		opfund = Arbitrator.vFreedomFund[1];
		BOOST_CHECK(opfund.value == atoi64((char* )arpacket2.money));
		BOOST_CHECK(buyer.llValues == (ntempbuyer.llValues - 5));
		opfund = buyer.vFreedomFund[0];
		int temp = (nrecive - atoi64((char*) arpacket2.money));
		//cout<<"befor:"<<opfund.value<<"after:"<<temp<<endl;
		BOOST_CHECK(opfund.value == (nrecive - atoi64((char* )arpacket2.money)));
	} else {
		CFund opfund = Arbitrator.vFreedomFund[0];
		BOOST_CHECK(Arbitrator.vFreedomFund.size() == 2);
		BOOST_CHECK(opfund.value == 5);
		opfund = Arbitrator.vFreedomFund[1];
		BOOST_CHECK(opfund.value == (ntempbuyer.llValues - 5) + nrecive);
		BOOST_CHECK(buyer.llValues == 0);
	}
}
struct CTxScript {
	CVmScript vscript;
	std::shared_ptr<CSecureTransaction> tx;
	std::shared_ptr<CAppealTransaction> ntx;
	std::shared_ptr<CAppealTransaction> thirdtx;
	CAccountViewCache view;
	CSecureAccount ntempbuyer;
	CSecureAccount ntempSeller;
	CSecureAccount ntempArbitrator;
	CTxScript() :
			view(*pAccountViewTip, true) {
		tx = std::make_shared < CSecureTransaction > (CSecureTransaction());
		ntx = std::make_shared < CAppealTransaction > (CAppealTransaction());
		thirdtx = std::make_shared < CAppealTransaction > (CAppealTransaction());
		vector<std::shared_ptr<CBaseTransaction> > Tx;
		Tx.push_back(tx);
		Tx.push_back(ntx);
		Tx.push_back(thirdtx);
		::Init(view, vscript, Tx);
		view.GetAccount(tx.get()->vArbitratorRegAccId[0], ntempArbitrator);
		view.GetAccount(tx.get()->vRegAccountId[0], ntempbuyer);
		view.GetAccount(tx.get()->vRegAccountId[1], ntempSeller);
	}
	void CheckEqual(CSecureAccount accBeforOperate, CSecureAccount accOperate) {
		BOOST_CHECK(accBeforOperate.vRewardFund == accOperate.vRewardFund);
		BOOST_CHECK(accBeforOperate.vFreedomFund == accOperate.vFreedomFund);
		BOOST_CHECK(accBeforOperate.vInputFreeze == accOperate.vInputFreeze);
		BOOST_CHECK(accBeforOperate.vOutputFreeze == accOperate.vOutputFreeze);
		BOOST_CHECK(accBeforOperate.vSelfFreeze == accOperate.vSelfFreeze);
		BOOST_CHECK(accBeforOperate.llValues == accOperate.llValues);
	}
};

BOOST_FIXTURE_TEST_SUITE(vmscrip_tests,CTxScript)

#if 1

BOOST_FIXTURE_TEST_CASE(vmscrip_onepacke,CTxScript) {

	for (int i = 0; i < EX_TIMES; i++) {
		//ntempbuyer.llValues = random(100);
		uint64_t ntemp = random(100);
		Cprepacke packet;
		packet.iniOutHeight = 30;
		packet.followOutHeight = 7;
		sprintf((char*) packet.money, "%ld", ntemp);
		//packet.money = random(100);
		if (ntemp <= 0)
		continue;
		//cout << ntemp << endl;
		CDataStream VmData(SER_DISK, CLIENT_VERSION);
		VmData << packet;
		tx.get()->vContract.clear();
		tx.get()->vContract.insert(tx.get()->vContract.begin(), VmData.begin(), VmData.end());
		//cout << HexStr(tx.get()->vContract).c_str() << endl;
		vector<std::shared_ptr<CBaseTransaction> > Tx;
		Tx.clear();
		Tx.push_back(tx);
		CVmScriptRun mScript(view, Tx, vscript);
		bool flag = mScript.run(Tx, view);
		vector<std::shared_ptr<CSecureAccount> > pac = mScript.GetNewAccont();
		CSecureAccount buyer;
		CSecureAccount Seller;
		for (auto& item : pac) {
			if (item.get()->keyID == ntempbuyer.keyID) {
				buyer = *item.get();
			}
			if (item.get()->keyID == ntempSeller.keyID) {
				Seller = *item.get();
			}
		}
		if (atoi64((char*) packet.money) > ntempbuyer.llValues) {
			BOOST_CHECK(!flag);
			BOOST_CHECK(pac.size() == 0);

		} else {
			BOOST_CHECK(flag);
			BOOST_CHECK(buyer.llValues == (ntempbuyer.llValues - atoi64((char* )packet.money)));
			CFund opfund = Seller.vInputFreeze[0];
			BOOST_CHECK(opfund.value == atoi64((char* )packet.money));
			BOOST_CHECK(opfund.uTxHash == tx.get()->GetHash());
		}
	}
}

BOOST_FIXTURE_TEST_CASE(vmscrip_twoAppealpacke,CTxScript) {

	for (int i = 0; i < EX_TIMES; i++) {
		uint64_t ntemp = random(100);
		CNextPacket packet;
		sprintf((char*) packet.money, "%ld", ntemp);
		//packet.money = random(100);
		if (ntemp <= 0 || ntemp >= 50)
		continue;
		//cout << packet.money << endl;
		CDataStream VmData(SER_DISK, CLIENT_VERSION);
		VmData << packet;
		ntx.get()->vContract.clear();
		ntx.get()->vContract.insert(ntx.get()->vContract.begin(), VmData.begin(), VmData.end());
		vector<std::shared_ptr<CBaseTransaction> > Tx;
		Tx.clear();
		Tx.push_back(tx);
		CVmScriptRun mScript(view, Tx, vscript);
		bool flag = mScript.run(Tx, view);
		CSecureAccount Temp;
		for (auto& item : view.cacheAccounts) {
			if (item.first == ntempbuyer.keyID) {
				Temp = item.second;
			}
		}
		if (Temp.llValues < 5) {
			BOOST_CHECK(!flag);
			continue;
		} else {
			BOOST_CHECK(flag);
		}

		vector<std::shared_ptr<CSecureAccount> > pac = mScript.GetNewAccont();
		Tx.clear();
		Tx.push_back(tx);
		Tx.push_back(ntx);

		CVmScriptRun mScript1(view, Tx, vscript);
		flag = mScript1.run(Tx, view);

		pac = mScript1.GetNewAccont();
		CSecureAccount buyer;
		CSecureAccount Arbitrator;
		for (auto& item : pac) {
			if (item.get()->keyID == ntempbuyer.keyID) {
				buyer = *item.get();
			}
			if (item.get()->keyID == ntempArbitrator.keyID) {
				Arbitrator = *item.get();
			}
		}
		BOOST_CHECK(flag);
		if (atoi64((char*) packet.money) >= ntempArbitrator.llValues) {
			BOOST_CHECK(Arbitrator.llValues == 0);
		} else {
			BOOST_CHECK(Arbitrator.llValues == ntempArbitrator.llValues - atoi64((char* )packet.money));
		}

		CFund opfund = buyer.vInputFreeze[0];
		if (atoi64((char*) packet.money) >= ntempArbitrator.llValues) {
			BOOST_CHECK(opfund.value == ntempArbitrator.llValues);
		} else {
			BOOST_CHECK(opfund.value == atoi64((char* )packet.money));
		}

		BOOST_CHECK(opfund.uTxHash == ntx.get()->GetHash());
	}
}

BOOST_FIXTURE_TEST_CASE(vmscrip_thirdArbitratorpacke,CTxScript) {

	for (int i = 0; i < EX_TIMES; i++) {

		view.SetAccount(ntempbuyer.keyID, ntempbuyer);
		view.SetAccount(ntempSeller.keyID, ntempSeller);
		view.SetAccount(ntempArbitrator.keyID, ntempArbitrator);
		uint64_t ntemp = random(100);
		CDataStream VmData(SER_DISK, CLIENT_VERSION);
		CNextPacket arpacket1;
		//arpacket1.money = random(100);;
		sprintf((char*) arpacket1.money, "%ld", ntemp);
		VmData << arpacket1;

		if (ntemp == 0)
		continue;
		ntemp = random(100);
		CNextPacket arpacket2;
		sprintf((char*) arpacket2.money, "%ld", ntemp);
		//arpacket2.money = random(100);

		if (ntemp == 0 || ntemp >= 50)
		continue;
		VmData << arpacket2;

		thirdtx.get()->vContract.clear();
		thirdtx.get()->vContract.insert(thirdtx.get()->vContract.end(), VmData.begin(), VmData.end());
		////cout<<HexStr(thirdtx.get()->vContract).c_str()<<endl;
		vector<std::shared_ptr<CBaseTransaction> > Tx;
		Tx.clear();
		Tx.push_back(tx);
		CVmScriptRun mScript(view, Tx, vscript);
		bool flag = mScript.run(Tx, view);

		CSecureAccount Temp;
		for (auto& item : view.cacheAccounts) {
			if (item.first == ntempbuyer.keyID) {
				Temp = item.second;
			}
		}
		if (Temp.llValues < 5) {
			BOOST_CHECK(!flag);
			continue;
		} else {
			BOOST_CHECK(flag);
		}
		vector<std::shared_ptr<CSecureAccount> > pac = mScript.GetNewAccont();
		for (auto& item : pac) {
			view.SetAccount(item.get()->keyID, *item.get());
		}

		Tx.clear();
		Tx.push_back(tx);
		Tx.push_back(ntx);
		CVmScriptRun mScriptv(view, Tx, vscript);
		flag = mScriptv.run(Tx, view);
		for (auto& item : view.cacheAccounts) {
			if (item.first == ntempArbitrator.keyID) {
				Temp = item.second;
			}
		}
		if (Temp.llValues < 5) {
			BOOST_CHECK(!flag);
			continue;
		} else {
			BOOST_CHECK(flag);
		}
		pac = mScriptv.GetNewAccont();
		for (auto& item : pac) {
			view.SetAccount(item.get()->keyID, *item.get());
		}

		Tx.clear();
		Tx.push_back(tx);
		Tx.push_back(ntx);
		Tx.push_back(thirdtx);
		CVmScriptRun mScript1(view, Tx, vscript);
		flag = mScript1.run(Tx, view);

		pac = mScript1.GetNewAccont();
		CSecureAccount Arbitrator;
		CSecureAccount buyer;
		CSecureAccount Seller;
		for (auto& item : pac) {
			if (item.get()->keyID == ntempbuyer.keyID) {
				buyer = *item.get();
			}
			if (item.get()->keyID == ntempSeller.keyID) {
				Seller = *item.get();
			}
			if (item.get()->keyID == ntempArbitrator.keyID) {
				Arbitrator = *item.get();
			}
		}

		BOOST_CHECK(flag);
		if (atoi64((char*) arpacket1.money) >= (ntempSeller.llValues + 5)) {
			BOOST_CHECK(Seller.llValues == 0);
			uint64_t nrecive = ntempSeller.llValues + 5;
			CheckretData(nrecive, ntempbuyer, buyer, ntempArbitrator, Arbitrator, arpacket2);
		} else if (atoi64((char*) arpacket1.money) < 5) {
			BOOST_CHECK(Seller.llValues == ntempSeller.llValues);
			CFund opfund = Seller.vInputFreeze[0];
			BOOST_CHECK(opfund.value == (5 - atoi64((char* )arpacket1.money)));
			uint64_t nrecive = atoi64((char*) arpacket1.money);
			CheckretData(nrecive, ntempbuyer, buyer, ntempArbitrator, Arbitrator, arpacket2);
		} else {
			BOOST_CHECK(Seller.llValues == (ntempSeller.llValues - atoi64((char* )arpacket1.money) + 5));
			uint64_t nrecive = atoi64((char*) arpacket1.money);
			CheckretData(nrecive, ntempbuyer, buyer, ntempArbitrator, Arbitrator, arpacket2);
		}
	}
}

#else
BOOST_AUTO_TEST_CASE(xxxx) {
	BOOST_ERROR("ERROR:THE SUITE NEED TO MODIFY!");
}
#endif

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(script_print)

#if 0

BOOST_AUTO_TEST_CASE(vmscrip_printout) {
	CVmScript vscript;
	vscript.Rom.insert(vscript.Rom.begin(), Array, Array + sizeof(Array));
	vscript.rule.maxPay = 50;
	vscript.rule.maxReSv = 50;
	vscript.rule.vNextOutHeight = 50;
	vscript.rule.vpreOutHeihgt = 100;
	CDataStream VmData(SER_DISK, CLIENT_VERSION);
	VmData << vscript;
	//cout << "script:" << HexStr(VmData.str()).c_str() << endl;

	VmData.clear();

	Cprepacke packet;
	packet.iniOutHeight = 30;
	packet.followOutHeight = 7;
	uint64_t ntemp = 5 * COIN;
	sprintf((char*) packet.money, "%ld", ntemp);
	VmData << packet;

	//cout << "The first package Contract:" << HexStr(VmData).c_str() << " money count:" << packet.money << endl;

	VmData.clear();
	CNextPacket npacket1;
//	npacket1.money = 5*COIN;
	sprintf((char*) npacket1.money, "%ld", ntemp);
	VmData << npacket1;

//cout << "second Appeal package Contract:" << HexStr(VmData).c_str() << " money count:" << npacket1.money << endl;

//// third
	VmData.clear();
	CNextPacket arpacket1;
//	arpacket1.money = 5*COIN;
	sprintf((char*) arpacket1.money, "%ld", ntemp);
	VmData << arpacket1;

	CNextPacket arpacket2;
//	arpacket2.money = 1*COIN;
	ntemp = 1 * COIN;
	sprintf((char*) arpacket2.money, "%ld", ntemp);
	VmData << arpacket2;
//cout << "third Arbitration package Contract:" << HexStr(VmData).c_str() << " money count:" << arpacket1.money
//			<< " ArbitratorAcc:" << arpacket2.money << endl;
}

#else
BOOST_AUTO_TEST_CASE(xxxx) {
	BOOST_ERROR("ERROR:THE SUITE NEED TO MODIFY!");
}
#endif

BOOST_AUTO_TEST_SUITE_END()
